import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.util.ArrayList;public class Main {    static ArrayList<Order> orders = new ArrayList<>();    static ArrayList<Cargo> cargos = new ArrayList<>();    public static void main(String[] args) {        feedCargoList();        feedOrderList();        /* Fill the cargos' order */        sendOrdersToCargos();        /* Show Orders of Cargos */        listCargos();        System.out.println("Bitti Gitti");        showMapCode();    }    private static void feedOrderList() {        try (BufferedReader br = new BufferedReader(new FileReader("src/orders.txt"))) {            String line = br.readLine();            do {                if (line.trim().isEmpty())                    continue;                String[] parts = line.split("\t", 3);                Order o = new Order(Integer.parseInt(parts[0]), Double.parseDouble(parts[1]),                        Double.parseDouble(parts[2]), cargos);                orders.add(o);                line = br.readLine();            } while (line != null);            br.close();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        } catch (Exception e) {            e.printStackTrace();        }    }    private static void feedCargoList() {        // Red - 1        // Green - 2        // Blue - 3        try (BufferedReader br = new BufferedReader(new FileReader("src/cargos.txt"))) {            String line = br.readLine();            do {                if (line.trim().isEmpty())                    continue;                String[] parts = line.split("\t", 5);                Cargo c = new Cargo                        (                                Integer.parseInt(parts[0]),                                Double.parseDouble(parts[1]),                                Double.parseDouble(parts[2]),                                Integer.parseInt(parts[3]),                                Integer.parseInt(parts[4])                        );                cargos.add(c);                line = br.readLine();            } while (line != null);            br.close();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        } catch (Exception e) {            e.printStackTrace();        }    }    private static void sendOrdersToCargos() {        promiseMinOrdersToCargos2();        fillOrdersToCargos();    }    private static void promiseMinOrdersToCargos() {        if (orders.size() == 0)            return;        for (int i = 0; i < cargos.size(); i++) {            if (orders.size() == 0)                break;            for (int j = 0; j < cargos.get(i).min; j++) {                if (orders.size() == 0)                    break;                Order o = orders.get(0);                int orderIndex = 0;                for (int y = 0; y < orders.size(); y++) {                    if (o.distance(cargos.get(i)) > orders.get(j).distance(cargos.get(i))) {                        o = orders.get(y);                        orderIndex = y;                    }                }                cargos.get(i).orders.add(o);                orders.remove(orderIndex);            } //Cargo Min Fill        } //Next Cargo    }    private static void promiseMinOrdersToCargos2() {        if (orders.size() == 0)            return;        int minPromised;        do {            minPromised = 0;            for (int i = 0; i < cargos.size(); i++) {                if (cargos.get(i).min == cargos.get(i).orders.size()) {                    minPromised++;                }            }            if (minPromised == cargos.size()) {                break;            }            for (int i = 0; i < cargos.size(); i++) {                if (cargos.get(i).orders.size() < cargos.get(i).min) {                    if (orders.size() == 0)                        break;                    Order o = orders.get(0);                    int orderIndex = 0;                    for (int y = 0; y < orders.size(); y++) {                        if (o.distance(cargos.get(i)) >= orders.get(y).distance(cargos.get(i))) {                            o = orders.get(y);                            orderIndex = y;                        }                    }                    cargos.get(i).orders.add(o);                    orders.remove(orderIndex);                } //Cargo Fill            } //Next Cargo        } while (minPromised != cargos.size());    }    private static void fillOrdersToCargos() {        if (orders.size() == 0)            return;        while (orders.size() != 0)            for (int i = 0; i < cargos.size(); i++) {                if (cargos.get(i).orders.size() < cargos.get(i).max) {                    if (orders.size() == 0)                        break;                    Order o = orders.get(0);                    int orderIndex = 0;                    for (int y = 0; y < orders.size(); y++) {                        if (cargos.get(i).longestDistance() * 1.5 < orders.get(y).distance(cargos.get(i))) {                            int checkLongForAll = 0;                            for (int z = 0; z < cargos.size(); z++) {                                if (cargos.get(i).longestDistance() * 2 < orders.get(y).distance(cargos.get(i))) {                                    checkLongForAll++;                                }                            }                            if (checkLongForAll != cargos.size()) {                                continue;                            } else {                                orders.get(y).closestCargo().orders.add(orders.get(y));                                orders.remove(y);                                continue;                            }                        }                        if (o.distance(cargos.get(i)) >= orders.get(y).distance(cargos.get(i))) {                            o = orders.get(y);                            orderIndex = y;                        }                    }                    cargos.get(i).orders.add(o);                    orders.remove(orderIndex);                } //Cargo Fill            } //Next Cargo    }    private static void listCargos() {        cargos.forEach(c -> {            System.out.println(c);            System.out.println();            System.out.println();            System.out.println();            System.out.println();            System.out.println();            System.out.println();            System.out.println();            System.out.println();        });    }    private static void showMapCode() {        for (int i = 0; i < cargos.size(); i++) {            System.out.println(cargos.get(i).lat + "," + cargos.get(i).lng + "{ÅžUBE=" + cargos.get(i).id + "} " + "<violet>");            for (int j = 0; j < cargos.get(i).orders.size(); j++) {                String color = "";                switch (cargos.get(i).id) {                    case 1:                        color = "<default>";                        break;                    case 2:                        color = "<green>";                        break;                    case 3:                        color = "<blue>";                        break;                }                System.out.println(cargos.get(i).orders.get(j).generateMap() + " " + color);            }        }    }}